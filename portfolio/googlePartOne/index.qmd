---
title: "Google Advanced Data Analytics Certification: Exploratory Data Analysis"
date: 12-22-2023
image: "gad.png"
toc: false
categories: 
  - Python
  - EDA
draft: false
---

```{r setup, include=FALSE}
library(reticulate)

```

:::{.callout-note}
This is taken from the Google Advanced Data Analytics Certification. I am using this as a way to practice my data analysis skills. The code chunks follow a series of prompts. The code to clean and explore the data was generated by me using the instructions provided.
:::

## Course 2 End-of-course project: <br>Inspect and analyze data

**Prompt:** You have just started as a data professional in a fictional data consulting firm, Automatidata. Their client, the New York City Taxi and Limousine Commission (New York City TLC), has hired the Automatidata team for its reputation in helping their clients develop data-based solutions.

The team is still in the early stages of the project. Previously, you were asked to complete a project proposal by your supervisor, DeShawn Washington. You have received notice that your project proposal has been approved and that New York City TLC has given the Automatidata team access to their data. To get clear insights, New York TLC's data must be analyzed, key variables identified, and the dataset ensured it is ready for analysis.

In this activity, you will examine data provided and prepare it for analysis. This activity will help ensure the information is,

1.  Ready to answer questions and yield insights

2.  Ready for visualizations

3.  Ready for future hypothesis testing and statistical methods <br/>

**The purpose** of this project is to investigate and understand the data provided.

**The goal** is to use a dataframe contructed within Python, perform a cursory inspection of the provided dataset, and inform team members of your findings. <br/>

*This activity has three parts:*

**Part 1:** Understand the situation

-   Prepare to understand and organize the provided taxi cab dataset and information.

**Part 2:** Understand the data

-   Create a pandas dataframe for data learning, future exploratory data analysis (EDA), and statistical activities.

-   Compile summary information about the data to inform next steps.

**Part 3:** Understand the variables

-   Use insights from your examination of the summary data to guide deeper investigation into specific variables.

<br/> Follow the instructions and answer the following questions to complete the activity. Then, you will complete an Executive Summary using the questions listed on the PACE Strategy Document.

Be sure to complete this activity before moving on. The next course item will provide you with a completed exemplar to compare to your own work.

### **Task 1. Understand the situation**

-   How can you best prepare to understand and organize the provided taxi cab information? <br/>

    -   **Answer:** <br/> <br/> I can best prepare to understand and organize the provided taxi cab information by first reading the data dictionary and then creating a dataframe in Python. <br/> <br/>

### **Task 2a. Build dataframe**

Create a pandas dataframe for data learning, and future exploratory data analysis (EDA) and statistical activities.

**Code the following,**

-   import pandas as `pd`. pandas is used for buidling dataframes.

-   import numpy as `np`. numpy is imported with pandas

-   `df = pd.read_csv()`


```{python}

# Import pandas and numpy

import pandas as pd
import numpy as np

df = pd.read_csv('2017_Yellow_Taxi_Trip_Data.csv')

```


### **Task 2b. Understand the data - Inspect the data**

View and inspect summary information about the dataframe by coding the following:

`df.head(10)` <br/>
`df.info()` <br/>
`df.describe()` <br/>

Consider the following two questions:

Question 1: When reviewing the df.info() output, what do you notice about the different variables? Are there any null values? Are all of the variables numeric? Does anything else stand out?

```{python}
df.head(10)
```

```{python}
df.info()
```


  -   **Answer:** <br/> <br/> When reviewing the df.info() output, I notice that there are 18 columns and 22,699 rows. I also notice that there are no null values. All of the variables are numeric with the exception of two date-time variables and one categorical variable. <br/> <br/>


Question 2: When reviewing the df.describe() output, what do you notice about the distributions of each variable? Are there any questionable values?

```{python}
df.describe()
```

  -   **Answer:** <br/> <br/> When reviewing the df.describe() output, I notice that the minimum value for the trip_distance variable is 0.00. This is a questionable value because it is not possible to have a trip distance of 0.00. The trip distance has an outlier of 33 miles. The fare amount has negative values. The tip amount has an max of $200, well above the IQR. <br/> <br/>
  
### **Task 2c. Understand the data - Investigate the variables**

Sort and interpret the data table for two variables:`trip_distance` and `total_amount`.

**Answer the following three questions:**

**Question 1:** Sort your first variable (`trip_distance`) from maximum to minimum value, do the values seem normal?

```{python}
df.sort_values(by=['trip_distance'], ascending=False)['trip_distance']
```

  -   **Answer:** <br/> <br/> When sorting the trip_distance variable from maximum to minimum value, the values do not seem normal. The maximum value is 33 miles, and there are others well above the 1.5*IQR threshold, which qualifies them as an outlier. The minimum value is 0.00 miles, which is not possible. <br/> <br/>


**Question 2:** Sort by your second variable (`total_amount`), are any values unusual?

```{python}
df.sort_values(['trip_distance'], ascending = False)[['total_amount','trip_distance']]
```

  -   **Answer:** <br/> <br/> There is one value above \$1,000, and there are negative values. The negative values bring into question the validity of the data. <br/><br/>

**Question 3:** Are the resulting rows similar for both sorts? Why or why not?

 -    **Answer:** <br/> <br/> Not exactly. The \$1200 trip was for 2.60 miles. The 33.92 mile trip was \$258.21, which might be reasonable. <br/><br/>

According to the data dictionary, the payment method was encoded as follows:

1 = Credit card  
2 = Cash  
3 = No charge  
4 = Dispute  
5 = Unknown  
6 = Voided trip  

* How many of each payment type are represented in the data?

```{python}
df['payment_type'].value_counts()
```

* What is the average tip for trips paid for with credit card?

```{python}
avg_cc_tip = df[df['payment_type']==1]['tip_amount'].mean()
print('Avg. cc tip:', avg_cc_tip)
```

* What is the average tip for trips paid for with cash?

```{python}
avg_cash_tip = df[df['payment_type']==2]['tip_amount'].mean()
print('Avg. cash tip:', avg_cash_tip)
```

* How many times is each vendor ID represented in the data?

```{python}
df['VendorID'].value_counts()
```
* What is the mean total amount for each vendor?

```{python}
df.groupby(['VendorID']).mean(numeric_only=True)[['total_amount']]
```

* Filter the data for credit card payments only

```{python}
credit_card = df[df['payment_type']==1]
```

* Calculate the average tip amount for each passenger count (credit card payments only)

```{python}
credit_card.groupby(['passenger_count']).mean(numeric_only=True)[['tip_amount']]
```

:::{.callout-important}
## 
This concludes the Course 2 final assignment
:::

